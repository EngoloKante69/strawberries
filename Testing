import cv2  # for camera vision task
from ultralytics import YOLO  # YOLOv8 model
import numpy as np  # used for numerical computing
from tensorflow.keras.models import load_model  # TensorFlow/Keras for the second model

# Load the YOLOv8 model
yolo_model = YOLO('C:\\Users\\22040264\\Documents\\_Schoolwork\\E300 FYP\\strawberry_runs\\strawberry_runs\\train36\\weights\\best.pt')

# Load the second ML model (e.g., TensorFlow/Keras model)
second_model = load_model('C:\\Users\\22040264\\Documents\\_Schoolwork\\E300 FYP\\second_model.h5')

# IP camera URL (DroidCam if using phone or other IP camera URL)
ip_camera_url = "http://10.175.37.251:4747/video"  # Replace with your IP camera's URL

# Open the IP camera stream
cap = cv2.VideoCapture(ip_camera_url)

if not cap.isOpened():
    print("Error: Unable to open the camera stream")
    exit()

# Function to preprocess frames for the second model
def preprocess_for_second_model(frame):
    frame_resized = cv2.resize(frame, (224, 224))  # Resize frame to model input size
    frame_normalized = frame_resized / 255.0  # Normalize pixel values
    return np.expand_dims(frame_normalized, axis=0)  # Add batch dimension

# Process each frame from the camera
while cap.isOpened():
    ret, frame = cap.read()

    if not ret:
        print("Failed to capture frame")
        break

    print("Captured frame successfully")  # Debugging line

    # Perform inference with YOLOv8
    yolo_results = yolo_model(frame)
    yolo_detections = yolo_results[0]

    if yolo_detections.boxes is not None:
        # Extract YOLO detections
        boxes = yolo_detections.boxes.xywh.cpu().numpy()
        confidences = yolo_detections.boxes.conf.cpu().numpy()
        class_ids = yolo_detections.boxes.cls.cpu().numpy().astype(int)
        yolo_labels = yolo_model.names

        # Draw YOLO detections
        for box, confidence, class_id in zip(boxes, confidences, class_ids):
            x, y, w, h = box
            label_name = yolo_labels[class_id]
            confidence_score = confidence

            start_point = (int(x - w / 2), int(y - h / 2))
            end_point = (int(x + w / 2), int(y + h / 2))

            cv2.rectangle(frame, start_point, end_point, (0, 255, 0), 2)
            cv2.putText(
                frame,
                f"{label_name} ({confidence_score:.2f})",
                (start_point[0], start_point[1] - 10),
                cv2.FONT_HERSHEY_SIMPLEX,
                0.5,
                (36, 255, 12),
                2
            )

    # Perform inference with the second model
    preprocessed_frame = preprocess_for_second_model(frame)
    second_model_predictions = second_model.predict(preprocessed_frame)

    # Process the second model's results
    if second_model_predictions[0][0] > 0.5:  # Example: binary classification
        cv2.putText(
            frame,
            "Second Model: Positive",
            (50, 50),
            cv2.FONT_HERSHEY_SIMPLEX,
            0.7,
            (255, 0, 0),
            2
        )
    else:
        cv2.putText(
            frame,
            "Second Model: Negative",
            (50, 50),
            cv2.FONT_HERSHEY_SIMPLEX,
            0.7,
            (0, 0, 255),
            2
        )

    # Display the annotated frame
    cv2.imshow("Strawberry Ripeness Detection", frame)

    # Exit on pressing 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
